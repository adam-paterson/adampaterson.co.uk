---
import Layout from './Layout.astro';

const { frontmatter } = Astro.props;

const {
  title,
  description,
  publishDate,
  updateDate,
  image,
  tags
} = frontmatter;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const imageURL = image ? new URL(image, Astro.site) : null;

const schema = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": canonicalURL.href
  },
  "headline": title,
  "description": description,
  "author": {
    "@type": "Person",
    "name": "Adam Paterson",
    "url": "https://adampaterson.co.uk"
  },
  "datePublished": publishDate,
  "dateModified": updateDate || publishDate,
  "image": imageURL?.href,
  "keywords": tags?.join(", "),
  "publisher": {
    "@type": "Organization",
    "name": "Adam Paterson",
    "url": "https://adampaterson.co.uk",
    "logo": {
      "@type": "ImageObject",
      "url": "https://adampaterson.co.uk/images/logo.png"
    }
  }
};
---
<Layout
  title={`${title} | Adam Paterson`}
  description={description}
  image={image}
  canonicalURL={canonicalURL.href}
>
  <!-- Article-specific meta tags -->
  <meta property="og:type" content="article" slot="head" />
  <meta property="article:published_time" content={publishDate} slot="head" />
  {updateDate && <meta property="article:modified_time" content={updateDate} slot="head" />}
  {tags?.map((tag: string) => (
    <meta property="article:tag" content={tag} slot="head" />
  ))}
  
  <!-- Article schema -->
  <script type="application/ld+json" set:html={JSON.stringify(schema)} slot="head" />

  <div class="container mx-auto px-4">
    <article class="max-w-5xl mx-auto">
      {image && (
        <img 
          src={image}
          alt={title}
          class="w-full h-72 md:h-[400px] object-cover rounded-lg mb-12 shadow-lg"
        />
      )}
      <header class="mb-12">
        <h1 class="text-4xl md:text-6xl font-bold mb-6 leading-tight">
          {title}
        </h1>
        <div class="flex flex-wrap items-center gap-4 text-gray-600 dark:text-gray-400">
          <time datetime={publishDate} class="text-lg">
            {new Date(publishDate).toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            })}
          </time>
          {tags && (
            <div class="flex flex-wrap gap-2">
              {tags.map((tag: string) => (
                <span class="bg-gray-100 dark:bg-gray-800 px-3 py-1 rounded-full text-sm font-medium">
                  {tag}
                </span>
              ))}
            </div>
          )}
        </div>
      </header>
      <div class="prose prose-lg md:prose-xl dark:prose-invert max-w-none prose-headings:font-bold prose-a:text-blue-600 dark:prose-a:text-blue-400 prose-img:rounded-lg [&_img:not(.shadow-none)]:shadow-lg">
        <slot />
      </div>
    </article>
  </div>
</Layout>