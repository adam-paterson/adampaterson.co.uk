---
import Layout from '../layouts/Layout.astro';
import NebulaEffect from '../components/NebulaEffect';
import OrbitalAccent from '../components/OrbitalAccent';
import AnimatedSection from '../components/AnimatedSection';
import Stars from '../components/Stars';
import SocialLinks from '../components/SocialLinks';

const pageTitle = "Contact Me - Adam Paterson";
const pageDescription = "Get in touch with Adam Paterson for AI solutions, e-commerce expertise, or collaboration opportunities.";

const contactReasons = [
  { id: "general", label: "General", icon: "üí¨" },
  { id: "ai", label: "AI Solutions", icon: "ü§ñ" },
  { id: "ecommerce", label: "E-commerce", icon: "üõçÔ∏è" },
  { id: "hire", label: "Hire Me", icon: "üë®‚Äçüíª" }
];

const contactLinks = [
  { title: "Email", value: "hello@adampaterson.co.uk", href: "mailto:hello@adampaterson.co.uk", icon: "‚úâÔ∏è" },
  { title: "Location", value: "Manchester, UK", icon: "üìç" },
  { title: "Availability", value: "Open to opportunities", icon: "üü¢" }
];

interface Field {
  name: string;
  label: string;
  type: 'text' | 'email' | 'select';  // Explicitly define allowed types
  options?: string[];  // Make options optional
}

interface FieldGroup {
  [key: string]: Field[];
}

// Define all possible fields with proper typing
const allFields: FieldGroup = {
  ai: [
    { name: 'company', label: 'Company', type: 'text' },
    { name: 'current_stack', label: 'Current Tech Stack', type: 'text' }
  ],
  ecommerce: [
    { name: 'company', label: 'Company', type: 'text' },
    { 
      name: 'platform', 
      label: 'E-commerce Platform', 
      type: 'select',
      options: ['Shopify', 'Magento', 'WooCommerce', 'Custom', 'Other']
    },
    {
      name: 'current_revenue',
      label: 'Current Monthly Revenue',
      type: 'select',
      options: ['$0-10k', '$10k-50k', '$50k-200k', '$200k+']
    }
  ],
  hire: [
    { name: 'company', label: 'Company', type: 'text' },
    {
      name: 'position_type',
      label: 'Position Type',
      type: 'select',
      options: ['Full-time', 'Contract', 'Freelance', 'Consulting']
    },
    {
      name: 'timeline',
      label: 'Timeline',
      type: 'select',
      options: ['Immediate', '1-3 months', '3-6 months', 'Flexible']
    }
  ]
};
---

<Layout title={pageTitle} description={pageDescription}>
  <main class="relative min-h-screen py-20">
    <Stars client:load className="fixed inset-0" />
    <NebulaEffect client:load />
    
    <div class="relative z-20">
      <AnimatedSection client:load className="max-w-6xl mx-auto px-4">
        <div class="relative mb-16">
          <OrbitalAccent client:load />
          <h1 class="text-4xl font-bold text-slate-900 dark:text-neutral-200">Contact Me</h1>
          <p class="text-slate-600 dark:text-neutral-400 mt-4">Let's explore the possibilities together</p>
        </div>

        <div class="grid md:grid-cols-[1.5fr,1fr] gap-16">
          {/* Contact Form */}
          <div>
            <form id="contactForm" class="space-y-8">
              {/* Contact Reason Pills */}
              <div class="flex flex-wrap gap-2">
                {contactReasons.map(reason => (
                  <label class="reason-pill group cursor-pointer">
                    <input 
                      type="radio" 
                      name="contact_reason" 
                      value={reason.id} 
                      class="hidden" 
                    />
                    <div class="px-4 py-2 rounded-full border 
                                flex items-center gap-2 
                                transition-all duration-300
                                bg-white/[0.02] border-white/5 
                                hover:border-white/10">
                      <span class="text-lg opacity-70 group-hover:opacity-100">{reason.icon}</span>
                      <span class="text-sm text-slate-700 dark:text-neutral-300">{reason.label}</span>
                    </div>
                  </label>
                ))}
              </div>

              {/* Base Fields */}
              <div class="grid md:grid-cols-2 gap-4">
                <div class="form-group">
                  <label for="name" class="text-xs text-slate-600 dark:text-neutral-400 mb-1.5 block">Name</label>
                  <input type="text" id="name" name="name" required class="form-input" />
                </div>
                <div class="form-group">
                  <label for="email" class="text-xs text-slate-600 dark:text-neutral-400 mb-1.5 block">Email</label>
                  <input type="email" id="email" name="email" required class="form-input" />
                </div>
              </div>

              {/* Dynamic Fields */}
              {Object.entries(allFields).map(([reasonId, fields]) => (
                <div id={`fields-${reasonId}`} class="hidden space-y-4">
                  {fields.map(field => (
                    <div class="form-group">
                      <label for={field.name} class="text-xs text-slate-600 dark:text-neutral-400 mb-1.5 block">
                        {field.label}
                      </label>
                      {field.type === 'select' ? (
                        <select 
                          id={field.name} 
                          name={field.name} 
                          required 
                          class="form-input"
                        >
                          <option value="">Select {field.label}</option>
                          {field.options?.map(option => (
                            <option value={option}>{option}</option>
                          ))}
                        </select>
                      ) : (
                        <input 
                          type={field.type}
                          id={field.name}
                          name={field.name}
                          required
                          class="form-input"
                        />
                      )}
                    </div>
                  ))}
                </div>
              ))}

              {/* Message Field */}
              <div class="form-group">
                <label for="message" class="text-xs text-slate-600 dark:text-neutral-400 mb-1.5 block">Message</label>
                <textarea id="message" name="message" rows="6" required class="form-input"></textarea>
              </div>

              <button 
                type="submit"
                class="relative px-8 py-3 rounded-lg border-2 
                       transition-colors duration-300
                       border-teal-600 text-teal-700 hover:bg-teal-50 hover:border-teal-700
                       dark:border-teal-400 dark:text-teal-400 dark:hover:bg-teal-900/10"
              >
                Send Message
              </button>
            </form>
          </div>

          {/* Contact Info Sidebar */}
          <div class="space-y-12">
            {/* Quick Links */}
            <div class="space-y-4">
              {contactLinks.map(link => (
                <div class="flex items-center gap-4 p-4 bg-white/[0.02] rounded-lg border border-white/5">
                  <span class="text-xl opacity-70">{link.icon}</span>
                  <div>
                    <div class="text-xs text-slate-600 dark:text-neutral-400">{link.title}</div>
                    {link.href ? (
                      <a href={link.href} class="text-sm text-slate-700 dark:text-neutral-200 hover:text-white">
                        {link.value}
                      </a>
                    ) : (
                      <div class="text-sm text-slate-700 dark:text-neutral-200">{link.value}</div>
                    )}
                  </div>
                </div>
              ))}
            </div>

            {/* Social Links */}
            <div class="p-6 bg-white/[0.02] rounded-lg border border-white/5">
              <h3 class="text-sm font-medium text-slate-900 dark:text-neutral-200 mb-4">Connect With Me</h3>
              <SocialLinks />
            </div>
          </div>
        </div>
      </AnimatedSection>
    </div>
  </main>
</Layout>

<script>
  // Simplified JavaScript just for showing/hiding fields
  document.querySelectorAll('input[name="contact_reason"]').forEach(radio => {
    radio.addEventListener('change', (e) => {
      // Hide all field groups
      document.querySelectorAll('[id^="fields-"]').forEach(group => {
        group.classList.add('hidden');
      });

      // Show selected field group
      const selectedReason = (e.target as HTMLInputElement).value;
      const fieldsToShow = document.getElementById(`fields-${selectedReason}`);
      if (fieldsToShow) {
        fieldsToShow.classList.remove('hidden');
      }

      // Update selected pill styling
      document.querySelectorAll('.reason-pill').forEach(pill => {
        pill.classList.remove('selected');
      });
      (e.target as HTMLElement).closest('.reason-pill')?.classList.add('selected');
    });
  });
</script>

<style>
  /* Light theme text colors */
  :global(.light) {
    /* Headings and important text */
    & h1, & h2, & h3, & .text-neutral-200, & .text-neutral-300 {
      color: rgb(15 23 42); /* slate-900 */
    }

    /* Secondary text */
    & .text-neutral-400, & label {
      color: rgb(51 65 85); /* slate-700 */
    }

    /* Form elements */
    & .form-input {
      background-color: rgb(248 250 252); /* slate-50 */
      border-color: rgb(226 232 240); /* slate-200 */
      color: rgb(15 23 42); /* slate-900 */
    }

    & .form-input:focus {
      border-color: rgb(148 163 184); /* slate-400 */
    }

    /* Reason pills */
    & .reason-pill div {
      background-color: rgb(248 250 252); /* slate-50 */
      border-color: rgb(226 232 240); /* slate-200 */
    }

    & .reason-pill.selected div {
      background-color: rgb(241 245 249); /* slate-100 */
      border-color: rgb(148 163 184); /* slate-400 */
    }

    /* Contact info cards */
    & [class*="flex items-center gap-4 p-4"],
    & .p-6 {
      background-color: rgb(248 250 252); /* slate-50 */
      border-color: rgb(226 232 240); /* slate-200 */
    }
  }

  /* Dark theme text colors - keep existing styles */
  :global(.dark) {
    & .text-neutral-200, & .text-neutral-300 {
      color: rgb(229 229 229);
    }

    & .text-neutral-400, & label {
      color: rgb(156 163 175); /* gray-400 */
    }
  }

  /* Base styles */
  .form-input {
    width: 100%;
    border-width: 1px;
    border-radius: 0.5rem;
    padding: 0.75rem 1rem;
    font-size: 0.875rem;
    transition-property: color, background-color, border-color;
    transition-duration: 300ms;
    outline: none;
  }

  /* Select specific styles */
  select.form-input {
    appearance: none;
    padding-right: 2.5rem;
    cursor: pointer;
    background-repeat: no-repeat;
    background-position: right 0.75rem center;
    background-size: 1.25rem;
  }

  :global(.light) select.form-input {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='rgb(51, 65, 85)'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M19 9l-7 7-7-7'%3E%3C/path%3E%3C/svg%3E");
  }

  :global(.dark) select.form-input {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='rgb(156, 163, 175)'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M19 9l-7 7-7-7'%3E%3C/path%3E%3C/svg%3E");
  }
</style>
